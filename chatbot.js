// Gi√° linh ki·ªán
const spareParts = {
    'th·∫ª nh·ªõ': { name: 'Th·∫ª nh·ªõ (AI Camera Hub)', price: 330000 },
    'ai camera hub': { name: 'Th·∫ª nh·ªõ (AI Camera Hub)', price: 330000 },
    'm·∫°ch ngu·ªìn hc': { name: 'M·∫°ch ngu·ªìn HC', price: 165000 },
    'ngu·ªìn hc': { name: 'M·∫°ch ngu·ªìn HC', price: 165000 },
    'm·∫°ch ngu·ªìn c√¥ng t·∫Øc': { name: 'M·∫°ch ngu·ªìn c√¥ng t·∫Øc', price: 410000 },
    'ngu·ªìn c√¥ng t·∫Øc': { name: 'M·∫°ch ngu·ªìn c√¥ng t·∫Øc', price: 410000 },
    'm·∫°ch c·∫£m ·ª©ng c√¥ng t·∫Øc': { name: 'M·∫°ch c·∫£m ·ª©ng c√¥ng t·∫Øc', price: 435000 },
    'c·∫£m ·ª©ng c√¥ng t·∫Øc': { name: 'M·∫°ch c·∫£m ·ª©ng c√¥ng t·∫Øc', price: 435000 },
    'module yale': { name: 'Module Yale', price: 660000 },
    'yale': { name: 'Module Yale', price: 660000 },
    'b·ªô ƒëi·ªÅu khi·ªÉn': { name: 'B·ªô ƒëi·ªÅu khi·ªÉn/RS485/Gate', price: 1320000 },
    'rs485': { name: 'B·ªô ƒëi·ªÅu khi·ªÉn/RS485/Gate', price: 1320000 },
    'gate': { name: 'B·ªô ƒëi·ªÅu khi·ªÉn/RS485/Gate', price: 1320000 }
};

class ChatbotUI {
    constructor() {
        this.container = document.getElementById('chatbotContainer');
        this.messagesContainer = document.getElementById('chatbotMessages');
        this.input = document.getElementById('chatbotInput');
        this.sendButton = document.getElementById('chatbotSend');
        this.toggleButton = document.getElementById('chatbotToggle');
        this.closeButton = document.getElementById('closeChatbot');
        this.history = JSON.parse(localStorage.getItem('chatbotHistory') || '[]');
        this.maxHistory = 30;
        this.isFirstOpen = true;
        this.isBotTyping = false;
        this.setupEventListeners();
        this.renderHistory();
    }

    setupEventListeners() {
        this.toggleButton.addEventListener('click', () => this.toggleChatbot());
        this.closeButton.addEventListener('click', () => this.closeChatbot());
        this.sendButton.addEventListener('click', () => this.handleUserInput());
        this.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleUserInput();
            }
        });
        this.input.addEventListener('focus', () => this.input.select());
        this.input.addEventListener('input', () => {
            this.sendButton.disabled = !this.input.value.trim();
        });
    }

    toggleChatbot() {
        const isHidden = this.container.style.display === 'none';
        this.container.style.display = isHidden ? 'flex' : 'none';
        if (isHidden) {
            this.input.focus();
            if (this.isFirstOpen) {
                this.showWelcomeMessage();
                this.isFirstOpen = false;
            }
        }
    }

    closeChatbot() {
        this.container.style.display = 'none';
    }

    showWelcomeMessage() {
        this.addMessage('Xin ch√†o! T√¥i l√† tr·ª£ l√Ω b√°o gi√° linh ki·ªán Lumi. ü§ñ', 'bot');
        this.addMessage('B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ gi√° linh ki·ªán, xem b·∫£ng gi√°, ho·∫∑c g√µ "h∆∞·ªõng d·∫´n" ƒë·ªÉ bi·∫øt th√™m.', 'bot');
        this.addMessage(this.generatePriceTable(), 'bot');
    }

    generatePriceTable() {
        const uniqueParts = Array.from(new Set(Object.values(spareParts).map(part => part.name)));
        let table = '<table class="price-table">';
        table += '<tr><th>Linh ki·ªán</th><th>Gi√° (VNƒê)</th></tr>';
        uniqueParts.forEach(partName => {
            const part = Object.values(spareParts).find(p => p.name === partName);
            table += `<tr><td>${part.name}</td><td>${this.formatPrice(part.price)}</td></tr>`;
        });
        table += '</table>';
        return table;
    }

    formatPrice(price) {
        return price.toLocaleString('vi-VN') + ' VNƒê';
    }

    addMessage(content, type) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        messageDiv.innerHTML = content;
        this.messagesContainer.appendChild(messageDiv);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        // L∆∞u l·ªãch s·ª≠
        this.history.push({ content, type });
        if (this.history.length > this.maxHistory) this.history.shift();
        localStorage.setItem('chatbotHistory', JSON.stringify(this.history));
    }

    addLoadingMessage() {
        this.isBotTyping = true;
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message loading';
        loadingDiv.id = 'chatbotLoadingMsg';
        loadingDiv.innerHTML = '<span class="loading-dots"><span>.</span><span>.</span><span>.</span></span> ƒêang so·∫°n c√¢u tr·∫£ l·ªùi...';
        this.messagesContainer.appendChild(loadingDiv);
        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    }

    removeLoadingMessage() {
        this.isBotTyping = false;
        const loadingDiv = document.getElementById('chatbotLoadingMsg');
        if (loadingDiv) loadingDiv.remove();
    }

    renderHistory() {
        this.messagesContainer.innerHTML = '';
        this.history.forEach(msg => this.addMessage(msg.content, msg.type));
    }

    clearHistory() {
        this.history = [];
        localStorage.removeItem('chatbotHistory');
        this.messagesContainer.innerHTML = '';
        this.showWelcomeMessage();
    }

    handleUserInput() {
        const userInput = this.input.value.trim();
        if (!userInput || this.isBotTyping) return;
        this.addMessage(userInput, 'user');
        this.input.value = '';
        this.sendButton.disabled = true;
        this.sendButton.classList.add('sending');
        // Reset animation n·∫øu g·ª≠i li√™n t·ª•c
        const sendIcon = this.sendButton.querySelector('.send-icon svg');
        if (sendIcon) {
            sendIcon.style.animation = 'none';
            // Force reflow ƒë·ªÉ restart animation
            void sendIcon.offsetWidth;
        }
        setTimeout(() => {
            this.sendButton.classList.remove('sending');
        }, 600);
        this.addLoadingMessage();
        setTimeout(() => {
            this.removeLoadingMessage();
            this.processUserInput(userInput);
            this.sendButton.disabled = false;
            this.input.focus();
        }, 900 + Math.random() * 400);
    }

    processUserInput(input) {
        const text = input.toLowerCase();
        // L·ªánh ƒë·∫∑c bi·ªát
        if (["help", "h∆∞·ªõng d·∫´n", "tr·ª£ gi√∫p", "?", "hdsd"].includes(text)) {
            this.showHelp();
            return;
        }
        if (["b·∫£ng gi√°", "gi√°", "list", "danh s√°ch", "price", "bang gia"].includes(text)) {
            this.addMessage(this.generatePriceTable(), 'bot');
            return;
        }
        if (["x√≥a l·ªãch s·ª≠", "clear", "clear history", "reset"].includes(text)) {
            this.clearHistory();
            this.addMessage('ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i.', 'bot');
            return;
        }
        // T√¨m ki·∫øm linh ki·ªán
        const matchedParts = Object.entries(spareParts)
            .filter(([key]) => text.includes(key))
            .map(([_, part]) => part);
        if (matchedParts.length > 0) {
            const uniqueParts = Array.from(new Set(matchedParts.map(part => part.name)));
            if (uniqueParts.length === 1) {
                const part = matchedParts[0];
                this.addMessage(
                    `Gi√° <b>${part.name}</b> l√† <span style='color:#008c4f;font-weight:600;'>${this.formatPrice(part.price)}</span>`,
                    'bot'
                );
            } else {
                this.addMessage(
                    `T√¥i t√¨m th·∫•y ${uniqueParts.length} linh ki·ªán li√™n quan:<br>` +
                    uniqueParts.map(name => {
                        const part = matchedParts.find(p => p.name === name);
                        return `- <b>${name}</b>: <span style='color:#008c4f;font-weight:600;'>${this.formatPrice(part.price)}</span>`;
                    }).join('<br>'),
                    'bot'
                );
            }
            return;
        }
        // C√¢u h·ªèi t·ª± nhi√™n
        if (/bao nhi√™u|gi√°|cost|how much|m·∫•y ti·ªÅn|gi√° ti·ªÅn|price/.test(text)) {
            this.addMessage('B·∫°n mu·ªën h·ªèi gi√° linh ki·ªán n√†o? Vui l√≤ng nh·∫≠p t√™n linh ki·ªán ho·∫∑c g√µ "b·∫£ng gi√°" ƒë·ªÉ xem danh s√°ch.', 'bot');
            return;
        }
        // L·ªùi ch√†o
        if (/ch√†o|hello|hi|xin ch√†o|alo|yo|hey/.test(text)) {
            this.addMessage('Ch√†o b·∫°n! B·∫°n c·∫ßn h·ªèi gi√° linh ki·ªán n√†o?', 'bot');
            return;
        }
        // L·ªánh ·∫©n/ƒë√≥ng
        if (["·∫©n", "ƒë√≥ng", "close", "hide", "bye", "t·∫°m bi·ªát"].includes(text)) {
            this.addMessage('Chatbot ƒë√£ ƒë∆∞·ª£c ·∫©n. Nh·∫•n bong b√≥ng üí¨ ƒë·ªÉ m·ªü l·∫°i.', 'bot');
            setTimeout(() => this.closeChatbot(), 1200);
            return;
        }
        // Kh√¥ng hi·ªÉu
        this.addMessage('Xin l·ªói, t√¥i ch∆∞a hi·ªÉu √Ω b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ gi√° linh ki·ªán, g√µ "b·∫£ng gi√°" ho·∫∑c "h∆∞·ªõng d·∫´n" ƒë·ªÉ xem th√™m.', 'bot');
    }

    showHelp() {
        const helpMessage = `
            <b>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Chatbot:</b><br>
            ‚Ä¢ G√µ t√™n linh ki·ªán ƒë·ªÉ xem gi√° (VD: "th·∫ª nh·ªõ", "m·∫°ch ngu·ªìn hc", "module yale")<br>
            ‚Ä¢ G√µ <b>b·∫£ng gi√°</b> ƒë·ªÉ xem to√†n b·ªô b·∫£ng gi√° linh ki·ªán<br>
            ‚Ä¢ G√µ <b>x√≥a l·ªãch s·ª≠</b> ƒë·ªÉ x√≥a h·ªôi tho·∫°i<br>
            ‚Ä¢ G√µ <b>h∆∞·ªõng d·∫´n</b> ƒë·ªÉ xem h∆∞·ªõng d·∫´n n√†y<br>
            <br><b>V√≠ d·ª•:</b><br>
            - "Gi√° module yale bao nhi√™u?"<br>
            - "Cho m√¨nh xem b·∫£ng gi√°"<br>
            - "th·∫ª nh·ªõ"<br>
            - "x√≥a l·ªãch s·ª≠"
        `;
        this.addMessage(helpMessage, 'bot');
    }
}

// Kh·ªüi t·∫°o chatbot khi trang ƒë√£ load
document.addEventListener('DOMContentLoaded', () => {
    const chatbot = new ChatbotUI();
    // Ch·ªâ hi·ªÉn th·ªã chatbot cho admin
    const isAdminLoggedIn = localStorage.getItem('isAdminLoggedIn') === 'true';
    const chatbotToggle = document.getElementById('chatbotToggle');
    const chatbotContainer = document.getElementById('chatbotContainer');
    chatbotToggle.style.display = isAdminLoggedIn ? 'flex' : 'none';
    chatbotContainer.style.display = 'none';
});
